{"version":3,"sources":["Build1/Build2.jsx","Build1/Build1.jsx","BuildTable/TableMain.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Build2","props","title","Build1","Fragment","React","Component","TableMain","data","Array","fill","map","item","i","number","text","width","height","rowCount","length","rowGetter","index","rowHeight","headerHeight","dataKey","label","cellDataGetter","rowData","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"oMAYeA,EATA,SAACC,GACZ,OACI,6BACI,iFACA,2BAAIA,EAAMC,SCWPC,E,kDAdX,WAAYF,GAAQ,uCACVA,G,qDAIN,OACI,kBAAC,IAAMG,SAAP,KACI,0CACA,kBAAC,EAAD,CAAQF,MAAO,oB,GATVG,IAAMC,W,yBCuCVC,EApCjB,uKAEM,IAAIC,EAAO,IAAIC,MAAM,KAAQC,KAAK,IAAIC,KAAI,SAACC,EAAMC,GAAP,MAAc,CAACC,OAAQD,EAAGE,KAAK,WAAD,OAAaF,OACrF,OACE,kBAAC,IAAD,MACG,YAAsB,IAApBG,EAAmB,EAAnBA,MAAmB,EAAZC,OACR,OACE,kBAAC,IAAD,CACEC,SAAUV,EAAKW,OACfC,UAAW,gBAAEC,EAAF,EAAEA,MAAF,OAAab,EAAKa,IAC7BC,UAAW,GACXN,MAAOA,EACPC,OAAQ,IACRM,aAAc,IAEd,kBAAC,IAAD,CACEC,QAAS,SACTC,MAAO,KACPC,eAAgB,qBAAEC,QAAqBb,QACvCE,MAAO,IACPC,OAAQ,KAEV,kBAAC,IAAD,CACEO,QAAS,OACTC,MAAO,2BACPC,eAAgB,qBAAEC,QAAqBZ,MACvCC,MAAO,IACPC,OAAQ,aA3B1B,GAA+BZ,IAAMC,WC+BtBsB,MA/Bf,WACE,OACE,6BACE,iDAGA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.92270bc2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//function Build2(){ }と一緒\r\nconst Build2 = (props) => {\r\n    return (\r\n        <div>\r\n            <p>Functionコンポーネント</p>\r\n            <p>{props.title}</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Build2;","import React from \"react\";\r\nimport Build2 from \"./Build2\";\r\n\r\nclass Build1 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <p>ClassBuild1</p>\r\n                <Build2 title={\"TitleReact\"}/>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Build1;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Column, Table} from 'react-virtualized';\r\nimport 'react-virtualized/styles.css'; // only needs to be imported once\r\nimport AutoSizer from  \"react-virtualized-auto-sizer\";\r\n\r\nexport class TableMain extends React.Component {\r\n    render() {\r\n      let data = new Array(100000).fill({}).map((item, i) => ({number: i, text: `product ${i}`}));\r\n      return (\r\n        <AutoSizer>\r\n          {({width, height}) => {\r\n            return (\r\n              <Table\r\n                rowCount={data.length}\r\n                rowGetter={({index}) => data[index]}\r\n                rowHeight={30}\r\n                width={width}\r\n                height={500}\r\n                headerHeight={30}\r\n              >\r\n                <Column \r\n                  dataKey={'number'}\r\n                  label={'No'}\r\n                  cellDataGetter={({rowData}) => rowData.number}\r\n                  width={120}\r\n                  height={30}\r\n                />\r\n                <Column \r\n                  dataKey={'text'}\r\n                  label={'テキスト'}\r\n                  cellDataGetter={({rowData}) => rowData.text}\r\n                  width={120}\r\n                  height={30}\r\n                />\r\n              </Table>\r\n            )\r\n          }}\r\n        </AutoSizer>\r\n      );\r\n    }\r\n}\r\n  export default TableMain;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Build1 from \"./Build1/Build1\";\nimport TableMain from \"./BuildTable/TableMain\";\n\nfunction App() {\n  return (\n    <div>\n      <p>\n        テスト\n    </p>\n      <Build1 />\n      <TableMain />\n    </div>\n\n    /*\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n         てすと\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n    */\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}